load("@rules_cc//cc:defs.bzl", "cc_library")

# Hybrid Rust Build Approach
#
# We use a hybrid approach instead of pure Bazel rules_rust for the following reasons:
#
# 1. Edition 2024 Compatibility: Pure Bazel approach fails because polars dependencies
#    like `comfy-table v7.2.1` require `edition2024`, which is not supported by the
#    Cargo 1.79.0 version that rules_rust currently uses.
#
# 2. Dependency Management: The Rust ecosystem moves fast, and cargo handles complex
#    dependency resolution better than crate_universe for large dependency trees.
#
# 3. Build Performance: cargo's incremental compilation and caching work well for
#    iterative development.
#
# 4. Maintenance: This approach is simpler and more maintainable than complex
#    pure Bazel configurations that would need frequent updates.
#
# Future Migration: When rules_rust supports newer Cargo versions with edition2024,
# we can consider migrating to a pure Bazel approach.

# Simple hybrid approach: use shell to call cargo directly
# This keeps it simple and maintainable without complex Bazel Rust rules

genrule(
    name = "rust_build",
    srcs = glob([
        "src/**/*.rs",
        "Cargo.toml",
        "Cargo.lock",
    ]),
    outs = [
        "libturbo_polars.a",
    ],
    cmd = """
        # Build using system cargo in the rust directory
        cd rust
        cargo build --release
        
        # Copy the static library to Bazel's expected location
        cp target/release/libturbo_polars.a ../$(location libturbo_polars.a)
    """,
    visibility = ["//visibility:public"],
)

# CC library wrapper for CGO compatibility
# The genrule produces a static library file, but CGO needs a proper cc_library
# target that provides the cc providers for linking.
cc_library(
    name = "turbo_polars_cc",
    srcs = [":rust_build"],
    visibility = ["//visibility:public"],
)

# Alias for compatibility with existing Go BUILD file
alias(
    name = "turbo_polars_static",
    actual = ":turbo_polars_cc",
    visibility = ["//visibility:public"],
)

# Cross-compilation targets
genrule(
    name = "rust_build_linux_amd64",
    srcs = glob([
        "src/**/*.rs", 
        "Cargo.toml",
        "Cargo.lock",
    ]),
    outs = ["libturbo_polars_linux_amd64.a"],
    cmd = """
        cd rust
        cargo build --release --target x86_64-unknown-linux-gnu
        cp target/x86_64-unknown-linux-gnu/release/libturbo_polars.a ../$(location libturbo_polars_linux_amd64.a)
    """,
    visibility = ["//visibility:public"],
)

genrule(
    name = "rust_build_darwin_arm64", 
    srcs = glob([
        "src/**/*.rs",
        "Cargo.toml", 
        "Cargo.lock",
    ]),
    outs = ["libturbo_polars_darwin_arm64.a"],
    cmd = """
        cd rust
        cargo build --release --target aarch64-apple-darwin
        cp target/aarch64-apple-darwin/release/libturbo_polars.a ../$(location libturbo_polars_darwin_arm64.a)
    """,
    visibility = ["//visibility:public"],
)
